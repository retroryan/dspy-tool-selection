#!/bin/bash

# Simple DSPy Tool Selection Demo Runner

echo "ü¶ô DSPy Tool Selection Demo"
echo "=========================="
echo ""

# Parse command line arguments
DEBUG_MODE=false
PREDICT_MODE=""
TOOL_SET=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --debug)
            DEBUG_MODE=true
            shift
            ;;
        --predict)
            PREDICT_MODE="predict"
            shift
            ;;
        --cot|--chain-of-thought)
            PREDICT_MODE="cot"
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [TOOL_SET] [OPTIONS]"
            echo ""
            echo "Arguments:"
            echo "  TOOL_SET             Tool set to load (default: productivity)"
            echo "                       Available: treasure_hunt, productivity, events,"
            echo "                                 ecommerce, finance, multi_domain"
            echo ""
            echo "Options:"
            echo "  --debug              Enable debug mode (show prompts and LLM responses)"
            echo "  --predict            Use Predict mode (direct prediction)"
            echo "  --cot                Use Chain of Thought mode (default)"
            echo "  --chain-of-thought   Same as --cot"
            echo "  -h, --help           Show this help message"
            echo ""
            echo "Examples:"
            echo "  ./run_demo.sh                    # Default: productivity tool set with CoT"
            echo "  ./run_demo.sh treasure_hunt      # Treasure hunt tool set"
            echo "  ./run_demo.sh productivity --debug  # Productivity tools with debug"
            echo "  ./run_demo.sh finance --predict  # Finance tools with Predict mode"
            exit 0
            ;;
        --*)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
        *)
            # This is the tool set argument
            if [ -z "$TOOL_SET" ]; then
                TOOL_SET="$1"
            else
                echo "Error: Multiple tool sets specified"
                echo "Use --help for usage information"
                exit 1
            fi
            shift
            ;;
    esac
done

# Set debug mode
if [ "$DEBUG_MODE" = true ]; then
    export DSPY_DEBUG=true
    echo "üîç Debug mode enabled"
    echo "  ‚Ä¢ Will show prompts generated by DSPy"
    echo "  ‚Ä¢ Will show raw LLM responses"
    echo "  ‚Ä¢ Will show how DSPy parses structured outputs"
    echo ""
fi

# Set predict mode
if [ "$PREDICT_MODE" = "predict" ]; then
    export DSPY_USE_PREDICT=true
    echo "üéØ Running in Predict mode (direct prediction)"
elif [ "$PREDICT_MODE" = "cot" ]; then
    export DSPY_USE_PREDICT=false
    echo "ü§î Running in Chain of Thought mode (step-by-step reasoning)"
else
    # Default to Chain of Thought
    export DSPY_USE_PREDICT=false
    echo "ü§î Running in Chain of Thought mode (step-by-step reasoning)"
fi

echo ""

# Run setup if needed
if [ ! -d ".venv" ] || [ ! -f ".env" ]; then
    echo "Running setup first..."
    ./setup.sh
    if [ $? -ne 0 ]; then
        echo "Setup failed. Please fix the issues and try again."
        exit 1
    fi
    echo ""
fi

# Run the demo
echo "üöÄ Running demo..."
if [ -n "$TOOL_SET" ]; then
    echo "üì¶ Tool set: $TOOL_SET"
else
    echo "üì¶ Tool set: productivity (default)"
fi
echo ""

# Build command
CMD="poetry run python -m tool_selection.multi_demo"
if [ -n "$TOOL_SET" ]; then
    CMD="$CMD $TOOL_SET"
fi
if [ "$PREDICT_MODE" = "predict" ]; then
    CMD="$CMD --predict"
fi

# Execute command
$CMD

if [ "$DEBUG_MODE" = true ]; then
    echo ""
    echo "üí° TIP: You can also use dspy.inspect_history() in your code"
    echo "   to see the prompts and responses at any point."
    echo ""
    echo "Note: You can permanently enable debug by setting DSPY_DEBUG=true in .env"
fi